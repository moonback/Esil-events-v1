import { QuoteRequest } from './quoteRequestService';
import { formatDate, formatItemsDetails, calculateTotalAmount, getDeliveryTypeLabel, getTimeSlotLabel } from '../components/admin/quoteRequests/QuoteRequestUtils';

/**
 * Service pour g√©rer la g√©n√©ration de r√©ponses IA pour les demandes de devis
 */

// Interface pour les options de r√©ponse
export interface ResponseOptions {
  tone?: 'formal' | 'friendly' | 'persuasive';
  includePromotion?: boolean;
  focusOnDetails?: boolean;
  responseLength?: 'concise' | 'standard' | 'detailed';
}

/**
 * Pr√©pare les donn√©es pour la g√©n√©ration de r√©ponse IA
 */
export const prepareAIPromptData = (selectedRequest: QuoteRequest, options?: ResponseOptions) => {
  const itemsDetails = formatItemsDetails(selectedRequest);
  const totalAmount = calculateTotalAmount(selectedRequest);

  // Adapter le message syst√®me en fonction des options
  let systemContent = "Tu es un expert commercial pour ESIL Events, sp√©cialiste de la location de mobilier √©v√©nementiel premium. G√©n√®re des r√©ponses de devis personnalis√©es, professionnelles et persuasives pour maximiser la conversion. ";
  
  // Ajuster le ton en fonction des options
  if (options?.tone === 'formal') {
    systemContent += "Utilise un ton formel, professionnel et respectueux. ";
  } else if (options?.tone === 'friendly') {
    systemContent += "Utilise un ton amical, chaleureux et accessible. ";
  } else if (options?.tone === 'persuasive') {
    systemContent += "Utilise un ton persuasif, convaincant et orient√© conversion. ";
  } else {
    systemContent += "Ton formel mais chaleureux, ";
  }
  
  // Ajouter les principes cl√©s
  systemContent += "Principes cl√©s : cr√©er un sentiment d'urgence (disponibilit√©, offre limit√©e), souligner l'exclusivit√© et l'expertise d'ESIL Events, utiliser la preuve sociale, mettre en avant la garantie de satisfaction et le service client. ";
  
  // Ajuster la structure en fonction des options
  systemContent += "Structure : Accroche personnalis√©e, pr√©sentation valorisante d'ESIL, description de l'impact du mobilier sur l'√©v√©nement, ";
  
  // D√©tailler les articles si l'option est activ√©e
  if (options?.focusOnDetails !== false) {
    systemContent += "d√©tail des articles (si fournis) avec caract√©ristiques premium, ";
  }
  
  // Inclure une promotion si l'option est activ√©e
  if (options?.includePromotion !== false) {
    systemContent += "offre sp√©ciale (ex: -5% si confirmation sous 7j), ";
  }
  
  // Compl√©ter la structure
  systemContent += "conditions claires (acompte 30%), appel √† l'action (RDV tel, showroom), signature pro ('L'√©l√©gance pour chaque √©v√©nement'), coordonn√©es compl√®tes, lien portfolio/r√©seaux sociaux. Int√®gre un t√©moignage g√©n√©rique si pertinent et mentionne nos services (conseil, installation, livraison premium).";
  
  // Ajuster la longueur de la r√©ponse
  if (options?.responseLength === 'concise') {
    systemContent += " G√©n√®re une r√©ponse concise et directe, en te concentrant sur l'essentiel.";
  } else if (options?.responseLength === 'detailed') {
    systemContent += " G√©n√®re une r√©ponse d√©taill√©e et compl√®te, en expliquant tous les aspects de l'offre.";
  }
  
  const systemMessage = {
    role: "system",
    content: systemContent
  };

  const userMessage = {
    role: "user",
    content: `G√©n√®re une r√©ponse de devis pour la demande #${selectedRequest.id?.substring(0, 8).toUpperCase() || 'N/A'}.

CLIENT:
‚Ä¢ Nom: ${selectedRequest.first_name || ''} ${selectedRequest.last_name || ''}
‚Ä¢ Email: ${selectedRequest.email || 'N/A'}
‚Ä¢ T√©l: ${selectedRequest.phone || 'N/A'}
‚Ä¢ Soci√©t√©: ${selectedRequest.company || 'N/A'}
‚Ä¢ Type: ${selectedRequest.customer_type === 'professional' ? 'Professionnel' : 'Particulier'}
‚Ä¢ Adresse Facturation: ${[selectedRequest.billing_address, selectedRequest.postal_code, selectedRequest.city].filter(Boolean).join(', ') || 'Non fournie'}

√âV√âNEMENT:
‚Ä¢ Date: ${selectedRequest.event_date ? formatDate(selectedRequest.event_date.toString()) : 'Non sp√©cifi√©e'}
‚Ä¢ Dur√©e: ${selectedRequest.event_duration || 'Non sp√©cifi√©e'}
‚Ä¢ Heures: ${selectedRequest.event_start_time || '?'} - ${selectedRequest.event_end_time || '?'}
‚Ä¢ Invit√©s: ${selectedRequest.guest_count || 'Non sp√©cifi√©'}
‚Ä¢ Lieu: ${selectedRequest.event_location === 'indoor' ? 'Int√©rieur' : 'Ext√©rieur'}
‚Ä¢ Description: ${selectedRequest.description || 'Aucune description fournie'}

ARTICLES & MONTANT (Indicatif):
${itemsDetails}
‚Ä¢ Total TTC Indicatif: ${totalAmount}‚Ç¨

LIVRAISON/RETRAIT:
‚Ä¢ Type: ${getDeliveryTypeLabel(selectedRequest.delivery_type || undefined)}
‚Ä¢ Date: ${selectedRequest.delivery_date ? formatDate(selectedRequest.delivery_date) : '-'}
‚Ä¢ Cr√©neau: ${getTimeSlotLabel(selectedRequest.delivery_time_slot || undefined)}
‚Ä¢ Adresse: ${[selectedRequest.delivery_address, selectedRequest.delivery_postal_code, selectedRequest.delivery_city].filter(Boolean).join(', ') || 'Non fournie ou identique facturation'}

COMMENTAIRES CLIENT: ${selectedRequest.comments || 'Aucun'}

INSTRUCTIONS SP√âCIFIQUES POUR L'IA :
1.  Commence par une salutation personnalis√©e (Ex: "Cher Monsieur/Ch√®re Madame [Nom de famille],", ou "Bonjour [Pr√©nom]," si appropri√©).
2.  Accroche : Remercie pour la demande et fais r√©f√©rence √† l'√©v√©nement sp√©cifique (date, type si possible).
3.  Valorise ESIL Events : Mentionne bri√®vement l'expertise et le positionnement premium.
4.  Confirme la bonne compr√©hension des besoins (mobilier, date, lieu).
5.  Si des articles sont list√©s, commente bri√®vement leur pertinence ou qualit√©. Sinon, propose d'aider √† la s√©lection.
7.  Pr√©cise les prochaines √©tapes : envoi du devis d√©taill√© formel, discussion t√©l√©phonique.
8.  Inclue un appel √† l'action clair pour planifier un √©change.
9.  Termine par une formule de politesse professionnelle et la signature compl√®te d'ESIL Events (incluant slogan, tel, email, site web).
10. Adapte le ton l√©g√®rement si c'est un client particulier ou professionnel.
11. N'invente pas de d√©tails non fournis, reste factuel sur les informations de la demande.
12. Fournis la r√©ponse uniquement, sans phrases comme "Voici la r√©ponse sugg√©r√©e :".
13. Utiliser la signature compl√®te d'ESIL Events :

L'√©quipe ESIL Events
L'√©l√©gance pour chaque √©v√©nement
üìû 06 20 46 13 85 | ‚úâ contact@esil-events.fr | üåê www.esil-events.fr
üìç Showroom : 7 rue de la cellophane, 78711 Mantes-la-Ville 
`
  };

  const messages = [systemMessage, userMessage];

  return { messages };
};

/**
 * Pr√©pare la requ√™te pour l'API Google Gemini
 */
const prepareGeminiRequest = (selectedRequest: QuoteRequest, options?: ResponseOptions) => {
  const { messages } = prepareAIPromptData(selectedRequest, options);
  
  // Extraire les messages syst√®me et utilisateur
  const systemPrompt = messages[0].content;
  const userQuestion = messages[1].content;

  return {
    contents: [
      {
        parts: [
          { text: systemPrompt },
          { text: userQuestion }
        ]
      }
    ],
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 1024,
      topP: 0.9
    }
  };
};

/**
 * Fonction pour effectuer une requ√™te API Google Gemini avec retry
 */
async function makeGeminiApiRequest(requestBody: any, apiKey: string, retryCount = 0, maxRetries = 3): Promise<any> {
  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      let errorData;
      try {
        const errorText = await response.text();
        errorData = JSON.parse(errorText);
      } catch (parseError) {
        errorData = { error: { message: `Erreur ${response.status}: ${response.statusText}. R√©ponse non JSON.` } };
      }
      
      // Si on a atteint le nombre maximum de tentatives, lancer une erreur
      if (retryCount >= maxRetries) {
        throw new Error(`Erreur API Google (${response.status}): ${errorData?.error?.message || response.statusText || 'Erreur inconnue'}`);
      }
      
      // Attendre avant de r√©essayer (backoff exponentiel)
      const waitTime = Math.min(1000 * Math.pow(2, retryCount), 10000);
      console.log(`Tentative Google API ${retryCount + 1}/${maxRetries} √©chou√©e. Nouvelle tentative dans ${waitTime}ms...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      // R√©essayer
      return makeGeminiApiRequest(requestBody, apiKey, retryCount + 1, maxRetries);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    if (retryCount < maxRetries) {
      // Attendre avant de r√©essayer
      const waitTime = Math.min(1000 * Math.pow(2, retryCount), 10000);
      console.log(`Erreur lors de la tentative Google API ${retryCount + 1}/${maxRetries}. Nouvelle tentative dans ${waitTime}ms...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      // R√©essayer
      return makeGeminiApiRequest(requestBody, apiKey, retryCount + 1, maxRetries);
    }
    throw error;
  }
}

/**
 * G√©n√®re une r√©ponse IA pour une demande de devis en utilisant l'API Google Gemini
 */
export const generateAIResponse = async (selectedRequest: QuoteRequest, options?: ResponseOptions): Promise<{ response?: string; error?: string }> => {
  try {
    // Utiliser l'API Google Gemini au lieu de DeepSeek
    const geminiApiKey = import.meta.env.VITE_GOOGLE_GEMINI_API_KEY;
    
    if (!geminiApiKey) {
      return { error: 'Erreur de configuration: Cl√© API Google Gemini manquante (VITE_GOOGLE_GEMINI_API_KEY).' };
    }

    // Pr√©parer la requ√™te pour Gemini
    const requestBody = prepareGeminiRequest(selectedRequest, options);

    // Appeler l'API Gemini
    const data = await makeGeminiApiRequest(requestBody, geminiApiKey);
    const generatedContent = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    if (!generatedContent) {
      throw new Error("La r√©ponse de l'API est vide ou mal structur√©e.");
    }

    return { response: generatedContent };
  } catch (err: any) {
    console.error('Erreur d√©taill√©e lors de la g√©n√©ration de la r√©ponse IA:', err);
    return { error: `Erreur lors de la g√©n√©ration IA: ${err.message}` };
  }
};