import { Message, BotResponse } from '../components/chat/types';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { useAdminService } from './adminService';

interface ChatContext {
  eventType?: string;
  budget?: number;
  date?: Date;
  location?: string;
  guestCount?: number;
  theme?: string;
  style?: string;
  preferences?: string[];
}

// Initialiser l'API Gemini
const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY || '');

const SYSTEM_PROMPT = `Tu es un assistant expert en √©v√©nementiel, sp√©cialis√© dans la location de mat√©riel pour √©v√©nements.
Ton r√¥le est d'aider les utilisateurs √† planifier leurs √©v√©nements en leur sugg√©rant le mat√©riel appropri√© et des inspirations visuelles.

Directives importantes :
1. Sois professionnel, amical et pr√©cis dans tes recommandations
2. Pose des questions pertinentes pour mieux comprendre les besoins
3. Adapte tes suggestions en fonction du contexte (budget, nombre d'invit√©s, style, etc.)
4. Propose des solutions cr√©atives et personnalis√©es
5. N'h√©site pas √† sugg√©rer des combinaisons de mat√©riel compl√©mentaires
6. Prends en compte les tendances actuelles en d√©coration √©v√©nementielle
7. Sugg√®re des moodboards pertinents pour inspirer les utilisateurs

IMPORTANT - Format de r√©ponse REQUIS (en JSON) :
{
  "message": "Message principal (obligatoire)",
  "type": "text" | "product" | "moodboard" | "checklist" (obligatoire, d√©faut: "text"),
  "metadata": {
    "productId": "ID du produit sugg√©r√©",
    "moodboardId": "ID du moodboard",
    "checklistId": "ID de la checklist",
    "eventType": "Type d'√©v√©nement",
    "theme": "Th√®me de l'√©v√©nement",
    "style": "Style d√©coratif"
  },
  "quickReplies": ["R√©ponse rapide 1", "R√©ponse rapide 2"]
}

R√àGLES STRICTES :
1. R√©ponds UNIQUEMENT avec le JSON ci-dessus
2. Le champ "message" est OBLIGATOIRE et ne doit jamais √™tre vide
3. Le champ "type" est OBLIGATOIRE et doit √™tre l'un des types list√©s
4. Les champs "metadata" et "quickReplies" sont optionnels
5. Ne mets pas de backticks ou de marqueurs de code autour du JSON
6. Assure-toi que le JSON est valide et bien format√©`;

const cleanJsonResponse = (text: string): string => {
  let cleaned = text.replace(/```json\n?/g, '').replace(/```\n?/g, '');
  cleaned = cleaned.trim();
  return cleaned;
};

const getDynamicQuickReplies = (context: ChatContext, lastMessage: string, config: any): string[] => {
  const replies: string[] = [];
  
  // R√©ponses bas√©es sur le type d'√©v√©nement
  if (context.eventType) {
    const eventTypeConfig = config.eventTypes.find((et: any) => et.id === context.eventType);
    if (eventTypeConfig) {
      // Utiliser les r√©ponses rapides configur√©es pour ce type d'√©v√©nement
      if (config.quickReplies.eventTypes[context.eventType]) {
        replies.push(...config.quickReplies.eventTypes[context.eventType]);
      }

      // Ajouter des suggestions bas√©es sur les styles et th√®mes disponibles
      if (!context.style && eventTypeConfig.styles.length > 0) {
        replies.push(`Quel style pr√©f√©rez-vous parmi : ${eventTypeConfig.styles.join(', ')} ?`);
      }
      if (!context.theme && eventTypeConfig.themes.length > 0) {
        replies.push(`Quel th√®me vous inspire le plus : ${eventTypeConfig.themes.join(', ')} ?`);
      }
      
      // Ajouter une suggestion de moodboard
      replies.push(`Voulez-vous voir des inspirations visuelles pour votre ${context.eventType} ?`);
    }
  }

  // R√©ponses bas√©es sur le dernier message
  if (lastMessage.toLowerCase().includes('budget')) {
    replies.push('Souhaitez-vous voir des options dans diff√©rentes gammes de prix ?');
  }
  if (lastMessage.toLowerCase().includes('style') || lastMessage.toLowerCase().includes('th√®me')) {
    replies.push('Voulez-vous voir des exemples de d√©coration dans ce style ?');
  }
  if (lastMessage.toLowerCase().includes('inspiration') || lastMessage.toLowerCase().includes('id√©e')) {
    replies.push('Je peux vous montrer des moodboards d\'inspiration');
  }
  if (lastMessage.toLowerCase().includes('invit√©s') || lastMessage.toLowerCase().includes('personnes')) {
    replies.push('Souhaitez-vous des suggestions adapt√©es √† ce nombre de personnes ?');
  }

  // R√©ponses g√©n√©riques si pas assez de r√©ponses contextuelles
  if (replies.length < 3) {
    replies.push(...config.quickReplies.generic);
  }

  // Retourner un maximum de 4 r√©ponses
  return replies.slice(0, 4);
};

export const processUserMessage = async (
  history: Message[],
  userInput: string,
  context: ChatContext
): Promise<BotResponse> => {
  try {
    console.log('üöÄ D√©but du traitement du message:', { userInput, context });
    
    const { loadConfig } = useAdminService();
    const config = loadConfig();
    console.log('üìã Configuration charg√©e:', config);

    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    console.log('üîë API Key pr√©sente:', !!apiKey);

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const chatHistory = formatChatHistory(history);
    
    const prompt = `${config.systemPrompt}

Contexte actuel:
${JSON.stringify(context, null, 2)}

Historique de la conversation:
${chatHistory}

Message de l'utilisateur: ${userInput}

R√©ponds uniquement au format JSON sp√©cifi√© ci-dessus.`;

    console.log('üìù Prompt pr√©par√©:', prompt);

    console.log('‚è≥ Envoi de la requ√™te √† Gemini...');
    const result = await model.generateContent(prompt);
    console.log('‚úÖ R√©ponse re√ßue de Gemini');
    
    const response = await result.response;
    const text = response.text();
    console.log('üì® Texte brut re√ßu:', text);
    
    const cleanedText = cleanJsonResponse(text);
    console.log('üßπ Texte nettoy√©:', cleanedText);
    
    let botResponse: BotResponse;
    try {
      botResponse = JSON.parse(cleanedText);
      console.log('üîÑ R√©ponse pars√©e:', botResponse);

      // Ensure the response has the required fields with defaults
      botResponse = {
        message: botResponse.message || 'Je ne peux pas r√©pondre pour le moment.',
        type: botResponse.type || 'text',
        metadata: botResponse.metadata || {},
        quickReplies: botResponse.quickReplies || []
      };
      
      console.log('‚ú® R√©ponse finale avec valeurs par d√©faut:', botResponse);
    } catch (parseError) {
      console.error('‚ùå Erreur de parsing JSON:', parseError);
      console.error('Texte qui a caus√© l\'erreur:', cleanedText);
      // Return a default response if parsing fails
      botResponse = {
        message: 'Je ne peux pas traiter votre message pour le moment. Veuillez r√©essayer.',
        type: 'text',
        metadata: {},
        quickReplies: []
      };
    }

    // Enrichir la r√©ponse avec des suggestions dynamiques
    const lastMessage = history[history.length - 1]?.content || '';
    botResponse.quickReplies = getDynamicQuickReplies(context, lastMessage, config);
    console.log('‚ú® R√©ponse finale avec suggestions:', botResponse);

    return botResponse;
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e:', {
      message: error instanceof Error ? error.message : 'Erreur inconnue',
      stack: error instanceof Error ? error.stack : undefined,
      error
    });
    throw new Error('Une erreur est survenue lors du traitement de votre message.');
  }
};

export const formatChatHistory = (messages: Message[]): string => {
  return messages
    .map(msg => `${msg.sender === 'user' ? 'Utilisateur' : 'Assistant'}: ${msg.content}`)
    .join('\n');
};

export const extractContextFromMessage = (message: string): Partial<ChatContext> => {
  console.log('üîç Extraction du contexte du message:', message);
  
  const { loadConfig } = useAdminService();
  const config = loadConfig();
  const context: Partial<ChatContext> = {};

  // Extraction du budget
  if (message.toLowerCase().includes('budget')) {
    const budgetMatch = message.match(/\d+/);
    if (budgetMatch) {
      context.budget = parseInt(budgetMatch[0]);
      console.log('üí∞ Budget extrait:', context.budget);
    }
  }

  // Extraction du nombre d'invit√©s
  if (message.toLowerCase().includes('personnes') || 
      message.toLowerCase().includes('invit√©s') || 
      message.toLowerCase().includes('participants')) {
    const guestMatch = message.match(/\d+/);
    if (guestMatch) {
      context.guestCount = parseInt(guestMatch[0]);
      console.log('üë• Nombre d\'invit√©s extrait:', context.guestCount);
    }
  }

  // Extraction du type d'√©v√©nement
  for (const eventType of config.eventTypes) {
    if (message.toLowerCase().includes(eventType.id)) {
      context.eventType = eventType.id;
      console.log('üéâ Type d\'√©v√©nement extrait:', context.eventType);
      break;
    }
  }

  // Extraction du style
  for (const style of config.styles) {
    if (style.keywords.some(keyword => message.toLowerCase().includes(keyword))) {
      context.style = style.id;
      console.log('üé® Style extrait:', context.style);
      break;
    }
  }

  // Extraction du th√®me
  for (const theme of config.themes) {
    if (theme.keywords.some(keyword => message.toLowerCase().includes(keyword))) {
      context.theme = theme.id;
      console.log('üé≠ Th√®me extrait:', context.theme);
      break;
    }
  }

  console.log('üìä Contexte final extrait:', context);
  return context;
}; 